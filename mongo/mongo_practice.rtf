{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red47\green255\blue18;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c15686\c99608\c7843;\csgray\c0\c87123;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \CocoaLigature0 (base) mehrdadyazdanibiouki@Mehrdads-MBP ~ % mongo            \
MongoDB shell version v5.0.3\
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb\
Implicit session: session \{ "id" : UUID("c4343cd2-8c50-4bb2-b5bd-d73d32c127d4") \}\
MongoDB server version: 4.4.9\
WARNING: shell and server versions do not match\
================\
Warning: the "mongo" shell has been superseded by "mongosh",\
which delivers improved usability and compatibility.The "mongo" shell has been deprecated and will be removed in\
an upcoming release.\
We recommend you begin using "mongosh".\
For installation instructions, see\
https://docs.mongodb.com/mongodb-shell/install/\
================\
---\
The server generated these startup warnings when booting: \
        2021-09-29T20:39:32.260-07:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\
---\
---\
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display\
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).\
\
        The monitoring data will be available on a MongoDB website with a unique URL accessible to you\
        and anyone you share the URL with. MongoDB may use this information to make product\
        improvements and to suggest MongoDB products and deployment options to you.\
\
        To enable free monitoring, run the following command: db.enableFreeMonitoring()\
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()\
---\
> db\
test\
> use animalShelter\
switched to db animalShelter\
> db\
animalShelter\
> show collections\
> db.dogs.insertOne(\{ name:"charlie", age:3, breed:"corgi"\})\
\{\
	"acknowledged" : true,\
	"insertedId" : ObjectId("6155405d217650695f42cb91")\
\}\
> show collections\
dogs\
> db.dogs.find()\
\{ "_id" : ObjectId("6155405d217650695f42cb91"), "name" : "charlie", "age" : 3, "breed" : "corgi" \}\
> db\
animalShelter\
> db.close\
animalShelter.close\
> db show\
uncaught exception: SyntaxError: unexpected token: identifier :\
@(shell):1:3\
> db shows\
uncaught exception: SyntaxError: unexpected token: identifier :\
@(shell):1:3\
> show dbs\
admin          0.000GB\
animalShelter  0.000GB\
config         0.000GB\
local          0.000GB\
> use ninjaPractice\
switched to db ninjaPractice\
> db\
ninjaPractice\
> db.createCollections('ninjas')\
uncaught exception: TypeError: db.createCollections is not a function :\
@(shell):1:1\
> db.createCollection('ninjas')\
\{ "ok" : 1 \}\
> \
> \
> \
> cls\
\
> db.ninjas.insert(\{name:"Mehrdad", status:"completed"\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.ninjas.find()\
\{ "_id" : ObjectId("6155c1f5217650695f42cb92"), "name" : "Mehrdad", "status" : "completed" \}\
> db.ninjas.find(\{name:"Mehrdad"\})\
\{ "_id" : ObjectId("6155c1f5217650695f42cb92"), "name" : "Mehrdad", "status" : "completed" \}\
> db.ninjas.find().pretty()\
\{\
	"_id" : ObjectId("6155c1f5217650695f42cb92"),\
	"name" : "Mehrdad",\
	"status" : "completed"\
\}\
> db.ninjas.insert(\{name:"Sima", status:"failed"\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.ninjas.find().pretty()\
\{\
	"_id" : ObjectId("6155c1f5217650695f42cb92"),\
	"name" : "Mehrdad",\
	"status" : "completed"\
\}\
\{\
	"_id" : ObjectId("6155c26d217650695f42cb93"),\
	"name" : "Sima",\
	"status" : "failed"\
\}\
> cls\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
> db.ninjas.find().pretty()\
\{\
	"_id" : ObjectId("6155c1f5217650695f42cb92"),\
	"name" : "Mehrdad",\
	"status" : "completed"\
\}\
\{\
	"_id" : ObjectId("6155c26d217650695f42cb93"),\
	"name" : "Sima",\
	"status" : "failed"\
\}\
> cls\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
> use my_first_db\
switched to db my_first_db\
> db\
my_first_db\
> db.createCollection('students')\
\{ "ok" : 1 \}\
> db.students.insert(\{name:"mehrdad", home_state:"CA", lucky_number:7, birthday:\{month:02, day:03, year:1991\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.insert(\{name:"Jerard", home_state:"TX", lucky_number:23, birthday:\{month:07, day:03, year:1992\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.insert(\{name:"Sarah", home_state:"ST", lucky_number:111, birthday:\{month:12, day:03, year:2001\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.insert(\{name:"Kirsten", home_state:"FL", lucky_number:13, birthday:\{month:12, day:13, year:2011\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.find().pretty()\
\{\
	"_id" : ObjectId("6155e9c6217650695f42cb94"),\
	"name" : "mehrdad",\
	"home_state" : "CA",\
	"lucky_number" : 7,\
	"birthday" : \{\
		"month" : 2,\
		"day" : 3,\
		"year" : 1991\
	\}\
\}\
\{\
	"_id" : ObjectId("6155e9ec217650695f42cb95"),\
	"name" : "Jerard",\
	"home_state" : "TX",\
	"lucky_number" : 23,\
	"birthday" : \{\
		"month" : 7,\
		"day" : 3,\
		"year" : 1992\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ea23217650695f42cb96"),\
	"name" : "Sarah",\
	"home_state" : "ST",\
	"lucky_number" : 111,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 3,\
		"year" : 2001\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ea4a217650695f42cb97"),\
	"name" : "Kirsten",\
	"home_state" : "FL",\
	"lucky_number" : 13,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 13,\
		"year" : 2011\
	\}\
\}\
> db.students.find(\{home_state:"CA"\}).pretty()\
\{\
	"_id" : ObjectId("6155e9c6217650695f42cb94"),\
	"name" : "mehrdad",\
	"home_state" : "CA",\
	"lucky_number" : 7,\
	"birthday" : \{\
		"month" : 2,\
		"day" : 3,\
		"year" : 1991\
	\}\
\}\
> cls\
\
> db\
my_first_db\
> db.makeCollection("student_collection")\
uncaught exception: TypeError: db.makeCollection is not a function :\
@(shell):1:1\
> db.createCollection('student_collection')\
\{ "ok" : 1 \}\
>  db.students.insert(\{name: "Joe Johnson", state: "California", lucky_number: 11, birthday: \{month: 1, day: 15, year:1992\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.insert(\{name: "Joe Johnson", state: "California", lucky_number: 11, birthday: \{month: 1, day: 15, year:1992\}\})gfdg\
uncaught exception: SyntaxError: unexpected token: identifier :\
@(shell):1:122\
> db.students.insert(\{name: "Bill Gates", state: "Washington", lucky_number: 6, birthday: \{month: 10, day: 16, year:1993\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.insert(\{name: "Elon Musk", state: "Washington", lucky_number: 2, birthday: \{month: 4, day: 4, year:1995\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.insert(\{name: "Alan Cohn", state: "California", lucky_number: 14, birthday: \{month: 8, day: 2, year:1988\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.insert(\{name: "Max Kayen", state: "New York", lucky_number: 1, birthday: \{month: 8, day: 2, year:1988\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> db.students.find()\
\{ "_id" : ObjectId("6155e9c6217650695f42cb94"), "name" : "mehrdad", "home_state" : "CA", "lucky_number" : 7, "birthday" : \{ "month" : 2, "day" : 3, "year" : 1991 \} \}\
\{ "_id" : ObjectId("6155e9ec217650695f42cb95"), "name" : "Jerard", "home_state" : "TX", "lucky_number" : 23, "birthday" : \{ "month" : 7, "day" : 3, "year" : 1992 \} \}\
\{ "_id" : ObjectId("6155ea23217650695f42cb96"), "name" : "Sarah", "home_state" : "ST", "lucky_number" : 111, "birthday" : \{ "month" : 12, "day" : 3, "year" : 2001 \} \}\
\{ "_id" : ObjectId("6155ea4a217650695f42cb97"), "name" : "Kirsten", "home_state" : "FL", "lucky_number" : 13, "birthday" : \{ "month" : 12, "day" : 13, "year" : 2011 \} \}\
\{ "_id" : ObjectId("6155ed35217650695f42cb98"), "name" : "Joe Johnson", "state" : "California", "lucky_number" : 11, "birthday" : \{ "month" : 1, "day" : 15, "year" : 1992 \} \}\
\{ "_id" : ObjectId("6155ed7d217650695f42cb99"), "name" : "Bill Gates", "state" : "Washington", "lucky_number" : 6, "birthday" : \{ "month" : 10, "day" : 16, "year" : 1993 \} \}\
\{ "_id" : ObjectId("6155ed93217650695f42cb9a"), "name" : "Elon Musk", "state" : "Washington", "lucky_number" : 2, "birthday" : \{ "month" : 4, "day" : 4, "year" : 1995 \} \}\
\{ "_id" : ObjectId("6155edae217650695f42cb9b"), "name" : "Alan Cohn", "state" : "California", "lucky_number" : 14, "birthday" : \{ "month" : 8, "day" : 2, "year" : 1988 \} \}\
\{ "_id" : ObjectId("6155edc2217650695f42cb9c"), "name" : "Max Kayen", "state" : "New York", "lucky_number" : 1, "birthday" : \{ "month" : 8, "day" : 2, "year" : 1988 \} \}\
> cls\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
> db.students.find().pretty()\
\{\
	"_id" : ObjectId("6155e9c6217650695f42cb94"),\
	"name" : "mehrdad",\
	"home_state" : "CA",\
	"lucky_number" : 7,\
	"birthday" : \{\
		"month" : 2,\
		"day" : 3,\
		"year" : 1991\
	\}\
\}\
\{\
	"_id" : ObjectId("6155e9ec217650695f42cb95"),\
	"name" : "Jerard",\
	"home_state" : "TX",\
	"lucky_number" : 23,\
	"birthday" : \{\
		"month" : 7,\
		"day" : 3,\
		"year" : 1992\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ea23217650695f42cb96"),\
	"name" : "Sarah",\
	"home_state" : "ST",\
	"lucky_number" : 111,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 3,\
		"year" : 2001\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ea4a217650695f42cb97"),\
	"name" : "Kirsten",\
	"home_state" : "FL",\
	"lucky_number" : 13,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 13,\
		"year" : 2011\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ed35217650695f42cb98"),\
	"name" : "Joe Johnson",\
	"state" : "California",\
	"lucky_number" : 11,\
	"birthday" : \{\
		"month" : 1,\
		"day" : 15,\
		"year" : 1992\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ed93217650695f42cb9a"),\
	"name" : "Elon Musk",\
	"state" : "Washington",\
	"lucky_number" : 2,\
	"birthday" : \{\
		"month" : 4,\
		"day" : 4,\
		"year" : 1995\
	\}\
\}\
\{\
	"_id" : ObjectId("6155edae217650695f42cb9b"),\
	"name" : "Alan Cohn",\
	"state" : "California",\
	"lucky_number" : 14,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\}\
\}\
\{\
	"_id" : ObjectId("6155edc2217650695f42cb9c"),\
	"name" : "Max Kayen",\
	"state" : "New York",\
	"lucky_number" : 1,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\}\
\}\
> cls\
\
> db.students.find(\{lucky_number:\{$lte:10\}\})\
\{ "_id" : ObjectId("6155e9c6217650695f42cb94"), "name" : "mehrdad", "home_state" : "CA", "lucky_number" : 7, "birthday" : \{ "month" : 2, "day" : 3, "year" : 1991 \} \}\
\{ "_id" : ObjectId("6155ed7d217650695f42cb99"), "name" : "Bill Gates", "state" : "Washington", "lucky_number" : 6, "birthday" : \{ "month" : 10, "day" : 16, "year" : 1993 \} \}\
\{ "_id" : ObjectId("6155ed93217650695f42cb9a"), "name" : "Elon Musk", "state" : "Washington", "lucky_number" : 2, "birthday" : \{ "month" : 4, "day" : 4, "year" : 1995 \} \}\
\{ "_id" : ObjectId("6155edc2217650695f42cb9c"), "name" : "Max Kayen", "state" : "New York", "lucky_number" : 1, "birthday" : \{ "month" : 8, "day" : 2, "year" : 1988 \} \}\
> db.students.find(\{lucky_number:\{$lte:10\}\}).pretty()\
\{\
	"_id" : ObjectId("6155e9c6217650695f42cb94"),\
	"name" : "mehrdad",\
	"home_state" : "CA",\
	"lucky_number" : 7,\
	"birthday" : \{\
		"month" : 2,\
		"day" : 3,\
		"year" : 1991\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ed93217650695f42cb9a"),\
	"name" : "Elon Musk",\
	"state" : "Washington",\
	"lucky_number" : 2,\
	"birthday" : \{\
		"month" : 4,\
		"day" : 4,\
		"year" : 1995\
	\}\
\}\
\{\
	"_id" : ObjectId("6155edc2217650695f42cb9c"),\
	"name" : "Max Kayen",\
	"state" : "New York",\
	"lucky_number" : 1,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\}\
\}\
> db.students.find(\{lucky_number:\{$lte:10, $gte:1\}\}).pretty()\
\{\
	"_id" : ObjectId("6155e9c6217650695f42cb94"),\
	"name" : "mehrdad",\
	"home_state" : "CA",\
	"lucky_number" : 7,\
	"birthday" : \{\
		"month" : 2,\
		"day" : 3,\
		"year" : 1991\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\}\
\}\
\{\
	"_id" : ObjectId("6155ed93217650695f42cb9a"),\
	"name" : "Elon Musk",\
	"state" : "Washington",\
	"lucky_number" : 2,\
	"birthday" : \{\
		"month" : 4,\
		"day" : 4,\
		"year" : 1995\
	\}\
\}\
\{\
	"_id" : ObjectId("6155edc2217650695f42cb9c"),\
	"name" : "Max Kayen",\
	"state" : "New York",\
	"lucky_number" : 1,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\}\
\}\
> cls\
\
> db.students.updateMany(\{\},\{$set:\{intrests:['coding', 'brunch', 'MongoDB']\}\} )\
\{ "acknowledged" : true, "matchedCount" : 9, "modifiedCount" : 9 \}\
> db.students.find(\{lucky_number:\{$lte:10, $gte:1\}\}).pretty()\
\{\
	"_id" : ObjectId("6155e9c6217650695f42cb94"),\
	"name" : "mehrdad",\
	"home_state" : "CA",\
	"lucky_number" : 7,\
	"birthday" : \{\
		"month" : 2,\
		"day" : 3,\
		"year" : 1991\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed93217650695f42cb9a"),\
	"name" : "Elon Musk",\
	"state" : "Washington",\
	"lucky_number" : 2,\
	"birthday" : \{\
		"month" : 4,\
		"day" : 4,\
		"year" : 1995\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155edc2217650695f42cb9c"),\
	"name" : "Max Kayen",\
	"state" : "New York",\
	"lucky_number" : 1,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
> cls\
\
\
> db.students.update(\{name:'Bill Gates'\},\{$push:\{intrests:'Microsoft'\}\})\
WriteResult(\{ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 \})\
> db.students.find(name:'Bill Gates')\
uncaught exception: SyntaxError: missing ) after argument list :\
@(shell):1:21\
> db.students.find(\{name:'Bill Gates'\})\
\{ "_id" : ObjectId("6155ed7d217650695f42cb99"), "name" : "Bill Gates", "state" : "Washington", "lucky_number" : 6, "birthday" : \{ "month" : 10, "day" : 16, "year" : 1993 \}, "intrests" : [ "coding", "brunch", "MongoDB", "Microsoft" ] \}\
> db.students.find(\{name:'Bill Gates'\}).pretty()\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB",\
		"Microsoft"\
	]\
\}\
> db.students.find(\{name:'Bill Gates'\}).pretty()\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB",\
		"Microsoft"\
	]\
\}\
> db.students.update(\{name: 'Elon Musk'\}, \{$push: \{interests: 'taxes'\}\})\
WriteResult(\{ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 \})\
> db.students.insert(\{name: 'Joe Schmo', home_state: 'California', lucky_number: 8, birthday: \{month: 1, day: 1, year: 1989\}\})\
WriteResult(\{ "nInserted" : 1 \})\
> cls\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
> db.students.find().pretty()\
\{\
	"_id" : ObjectId("6155e9c6217650695f42cb94"),\
	"name" : "mehrdad",\
	"home_state" : "CA",\
	"lucky_number" : 7,\
	"birthday" : \{\
		"month" : 2,\
		"day" : 3,\
		"year" : 1991\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155e9ec217650695f42cb95"),\
	"name" : "Jerard",\
	"home_state" : "TX",\
	"lucky_number" : 23,\
	"birthday" : \{\
		"month" : 7,\
		"day" : 3,\
		"year" : 1992\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ea23217650695f42cb96"),\
	"name" : "Sarah",\
	"home_state" : "ST",\
	"lucky_number" : 111,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 3,\
		"year" : 2001\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ea4a217650695f42cb97"),\
	"name" : "Kirsten",\
	"home_state" : "FL",\
	"lucky_number" : 13,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 13,\
		"year" : 2011\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed35217650695f42cb98"),\
	"name" : "Joe Johnson",\
	"state" : "California",\
	"lucky_number" : 11,\
	"birthday" : \{\
		"month" : 1,\
		"day" : 15,\
		"year" : 1992\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB",\
		"Microsoft"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed93217650695f42cb9a"),\
	"name" : "Elon Musk",\
	"state" : "Washington",\
	"lucky_number" : 2,\
	"birthday" : \{\
		"month" : 4,\
		"day" : 4,\
		"year" : 1995\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"interests" : [\
		"taxes"\
	]\
\}\
\{\
	"_id" : ObjectId("6155edae217650695f42cb9b"),\
	"name" : "Alan Cohn",\
	"state" : "California",\
	"lucky_number" : 14,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155edc2217650695f42cb9c"),\
	"name" : "Max Kayen",\
	"state" : "New York",\
	"lucky_number" : 1,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155f1c9217650695f42cb9d"),\
	"name" : "Joe Schmo",\
	"home_state" : "California",\
	"lucky_number" : 8,\
	"birthday" : \{\
		"month" : 1,\
		"day" : 1,\
		"year" : 1989\
	\}\
\}\
> cls\
\
> db.students.remove(\{home_state:'California'\})\
WriteResult(\{ "nRemoved" : 1 \})\
> db.students.find().pretty()\
\{\
	"_id" : ObjectId("6155e9c6217650695f42cb94"),\
	"name" : "mehrdad",\
	"home_state" : "CA",\
	"lucky_number" : 7,\
	"birthday" : \{\
		"month" : 2,\
		"day" : 3,\
		"year" : 1991\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155e9ec217650695f42cb95"),\
	"name" : "Jerard",\
	"home_state" : "TX",\
	"lucky_number" : 23,\
	"birthday" : \{\
		"month" : 7,\
		"day" : 3,\
		"year" : 1992\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ea23217650695f42cb96"),\
	"name" : "Sarah",\
	"home_state" : "ST",\
	"lucky_number" : 111,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 3,\
		"year" : 2001\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ea4a217650695f42cb97"),\
	"name" : "Kirsten",\
	"home_state" : "FL",\
	"lucky_number" : 13,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 13,\
		"year" : 2011\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed35217650695f42cb98"),\
	"name" : "Joe Johnson",\
	"state" : "California",\
	"lucky_number" : 11,\
	"birthday" : \{\
		"month" : 1,\
		"day" : 15,\
		"year" : 1992\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB",\
		"Microsoft"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed93217650695f42cb9a"),\
	"name" : "Elon Musk",\
	"state" : "Washington",\
	"lucky_number" : 2,\
	"birthday" : \{\
		"month" : 4,\
		"day" : 4,\
		"year" : 1995\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"interests" : [\
		"taxes"\
	]\
\}\
\{\
	"_id" : ObjectId("6155edae217650695f42cb9b"),\
	"name" : "Alan Cohn",\
	"state" : "California",\
	"lucky_number" : 14,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155edc2217650695f42cb9c"),\
	"name" : "Max Kayen",\
	"state" : "New York",\
	"lucky_number" : 1,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
> cls\
\
> db.students.remove(\{home_state:'CA'\})\
WriteResult(\{ "nRemoved" : 1 \})\
> db.students.remove(\{home_state:'California'\})\
WriteResult(\{ "nRemoved" : 0 \})\
> db.students.find().pretty()\
\{\
	"_id" : ObjectId("6155e9ec217650695f42cb95"),\
	"name" : "Jerard",\
	"home_state" : "TX",\
	"lucky_number" : 23,\
	"birthday" : \{\
		"month" : 7,\
		"day" : 3,\
		"year" : 1992\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ea23217650695f42cb96"),\
	"name" : "Sarah",\
	"home_state" : "ST",\
	"lucky_number" : 111,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 3,\
		"year" : 2001\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ea4a217650695f42cb97"),\
	"name" : "Kirsten",\
	"home_state" : "FL",\
	"lucky_number" : 13,\
	"birthday" : \{\
		"month" : 12,\
		"day" : 13,\
		"year" : 2011\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed35217650695f42cb98"),\
	"name" : "Joe Johnson",\
	"state" : "California",\
	"lucky_number" : 11,\
	"birthday" : \{\
		"month" : 1,\
		"day" : 15,\
		"year" : 1992\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"lucky_number" : 6,\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB",\
		"Microsoft"\
	]\
\}\
\{\
	"_id" : ObjectId("6155ed93217650695f42cb9a"),\
	"name" : "Elon Musk",\
	"state" : "Washington",\
	"lucky_number" : 2,\
	"birthday" : \{\
		"month" : 4,\
		"day" : 4,\
		"year" : 1995\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"interests" : [\
		"taxes"\
	]\
\}\
\{\
	"_id" : ObjectId("6155edae217650695f42cb9b"),\
	"name" : "Alan Cohn",\
	"state" : "California",\
	"lucky_number" : 14,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
\{\
	"_id" : ObjectId("6155edc2217650695f42cb9c"),\
	"name" : "Max Kayen",\
	"state" : "New York",\
	"lucky_number" : 1,\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	]\
\}\
> cls\
\
>  db.students.updateMany(\{\}, \{$set: \{number_of_belts: 0\}\})\
\{ "acknowledged" : true, "matchedCount" : 8, "modifiedCount" : 8 \}\
>  db.students.updateMany(\{\}, \{$unset: \{'lucky_number': ''\}\})\
\{ "acknowledged" : true, "matchedCount" : 8, "modifiedCount" : 8 \}\
> db.students.updateMany(\{\}, \{$set: \{'updated_on': Date()\}\})\
\{ "acknowledged" : true, "matchedCount" : 8, "modifiedCount" : 8 \}\
> db.students.find().pretty()\
\{\
	"_id" : ObjectId("6155e9ec217650695f42cb95"),\
	"name" : "Jerard",\
	"home_state" : "TX",\
	"birthday" : \{\
		"month" : 7,\
		"day" : 3,\
		"year" : 1992\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"number_of_belts" : 0,\
	"updated_on" : "Thu Sep 30 2021 10:28:34 GMT-0700 (PDT)"\
\}\
\{\
	"_id" : ObjectId("6155ea23217650695f42cb96"),\
	"name" : "Sarah",\
	"home_state" : "ST",\
	"birthday" : \{\
		"month" : 12,\
		"day" : 3,\
		"year" : 2001\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"number_of_belts" : 0,\
	"updated_on" : "Thu Sep 30 2021 10:28:34 GMT-0700 (PDT)"\
\}\
\{\
	"_id" : ObjectId("6155ea4a217650695f42cb97"),\
	"name" : "Kirsten",\
	"home_state" : "FL",\
	"birthday" : \{\
		"month" : 12,\
		"day" : 13,\
		"year" : 2011\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"number_of_belts" : 0,\
	"updated_on" : "Thu Sep 30 2021 10:28:34 GMT-0700 (PDT)"\
\}\
\{\
	"_id" : ObjectId("6155ed35217650695f42cb98"),\
	"name" : "Joe Johnson",\
	"state" : "California",\
	"birthday" : \{\
		"month" : 1,\
		"day" : 15,\
		"year" : 1992\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"number_of_belts" : 0,\
	"updated_on" : "Thu Sep 30 2021 10:28:34 GMT-0700 (PDT)"\
\}\
\{\
	"_id" : ObjectId("6155ed7d217650695f42cb99"),\
	"name" : "Bill Gates",\
	"state" : "Washington",\
	"birthday" : \{\
		"month" : 10,\
		"day" : 16,\
		"year" : 1993\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB",\
		"Microsoft"\
	],\
	"number_of_belts" : 0,\
	"updated_on" : "Thu Sep 30 2021 10:28:34 GMT-0700 (PDT)"\
\}\
\{\
	"_id" : ObjectId("6155ed93217650695f42cb9a"),\
	"name" : "Elon Musk",\
	"state" : "Washington",\
	"birthday" : \{\
		"month" : 4,\
		"day" : 4,\
		"year" : 1995\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"interests" : [\
		"taxes"\
	],\
	"number_of_belts" : 0,\
	"updated_on" : "Thu Sep 30 2021 10:28:34 GMT-0700 (PDT)"\
\}\
\{\
	"_id" : ObjectId("6155edae217650695f42cb9b"),\
	"name" : "Alan Cohn",\
	"state" : "California",\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"number_of_belts" : 0,\
	"updated_on" : "Thu Sep 30 2021 10:28:34 GMT-0700 (PDT)"\
\}\
\{\
	"_id" : ObjectId("6155edc2217650695f42cb9c"),\
	"name" : "Max Kayen",\
	"state" : "New York",\
	"birthday" : \{\
		"month" : 8,\
		"day" : 2,\
		"year" : 1988\
	\},\
	"intrests" : [\
		"coding",\
		"brunch",\
		"MongoDB"\
	],\
	"number_of_belts" : 0,\
	"updated_on" : "Thu Sep 30 2021 10:28:34 GMT-0700 (PDT)"\
\}\
> \
}